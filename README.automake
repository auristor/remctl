Automake 1.9 doesn't support the Autoconf AC_CONFIG_LIBOBJ_DIR directive
to place replacements for missing functions in a subdirectory, and doesn't
correctly handle values passed to AC_LIBOBJ that place the object file in
a subdirectory.  Here is a copy of my bug report:

| After checking for a deficient snprintf, I call
| AC_LIBOBJ([util/snprintf]).  This results in the following error from
| Automake:
| 
| configure.ac:25: required file `./util/snprintf.c' not found
| 
| even though the file exists.
| 
| The problem is in the dir_has_case_matching_file routine in
| Automake/FileUtils.pm, which assumes that the file that it's passed is
| a simple filename, or alternately is in require_file_internal in
| automake itself, which doesn't detect this case.  A quick inspection
| of the former routine reveals that it will never work if passed a
| filename like util/snprintf.c (and a $dir of ., which is what happens
| in this case).

The next release of Automake is supposed to fix this by paying attention
to AC_CONFIG_LIBOBJ_DIR.  In the meantime, in order to regenerate
Makefile.in from Makefile.am for this package, you will need to apply the
following patch to Automake:

--- automake1.9-1.9.6/lib/Automake/FileUtils.pm.orig	2005-05-14 13:21:06.000000000 -0700
+++ automake1.9-1.9.6/lib/Automake/FileUtils.pm	2006-03-29 20:46:43.000000000 -0800
@@ -339,6 +339,16 @@
   my ($dirname, $file_name) = @_;
   return 0 unless -f "$dirname/$file_name";
 
+  # It's possible that the file name won't be a simple file name and
+  # instead will include a directory component.  In that case, we have
+  # to figure out what the real directory is.
+  if ($file_name =~ m%/%)
+    {
+      my $partial_dir;
+      ($partial_dir, $file_name) = ($file_name =~ m%^(.*)/([^/]*)%);
+      $dirname = "$dirname/$partial_dir";
+    }
+
   # The file appears to exist, however it might be a mirage if the
   # system is case insensitive.  Let's browse the directory and check
   # whether the file is really in.  We maintain a cache of directories

                            remctl To-Do List

 * Allow a more expressive configuration syntax that can set more options
   per command.  Among the things we want to configure (besides the
   logmask configuration we already have) are changing users before
   running the command, specifying an argument to pass on standard input
   (see below), or supporting things like LDAP ACLs.

 * Implement file upload in the remctl client.  On the server side, since
   we want to handle file data that contains nul characters, we'll also
   need to support passing one of the arguments to the executed command on
   standard input.  This may depend on the new configuration syntax.

 * Support continuation of commands in the library through a lower-level
   command interface.

 * Implement Perl bindings for the remctl client library.

 * Support LDAP-based ACLs in addition to file system ACLs.

 * Support IPv6.

 * The port that remctld uses is rather stupid and frequently blocked due
   to Windows viruses and other issues.  We need to transition to a new
   port, and hopefully one that's registered with IANA.

 * Add readline support to the remctl client for multiple commands to the
   same server in the same authenticated session.

 * In standalone mode, remctld doesn't shut down cleanly after a signal
   and in particular doesn't delete its PID file if it was configured to
   write one.

 * In standalone mode, we need to fork a new process for each incoming
   connection since the connections may be long-lived.

 * GSS-API error reporting should be shared between client and server.

 * In internal_v2_output, reading strings from messages can be shared.

 * There is duplicate code between server_v2_handle_commands and
   server_v2_handle_token that needs to be refactored.

 * Add a test suite for configuration and ACL parsing.
